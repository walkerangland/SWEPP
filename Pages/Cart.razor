@page "/cart"
@inject SWEPP.Services.OrderService OrderService
@inject SWEPP.Services.CustomerService CustomerService
@inject NavigationManager NavigationManager
@using SWEPP.Models

<h3>Your Cart</h3>

@if (OrderService.CurrentOrder.Any())
{
    <ul>
        @foreach (var item in OrderService.CurrentOrder.ToList())
        {
            <li>
                @item.Name - @item.Price.ToString("C")
                <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
            </li>
        }
    </ul>
    <h4>Total: @OrderService.CurrentOrder.Sum(item => item.Price).ToString("C")</h4>

    @if (CustomerService.LoggedInCustomer == null)
    {
        <div>
            <label for="payment-method">Choose a payment method:</label>
            <select id="payment-method" @bind="selectedPaymentMethod">
                <option value="Visa">Visa</option>
                <option value="MasterCard">MasterCard</option>
                <option value="Cash">Cash</option>
            </select>
        </div>
    }

    <button class="btn btn-success" @onclick="Checkout">Checkout</button>
    <button class="btn btn-danger" @onclick="ClearCart">Clear Cart</button>
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private string selectedPaymentMethod = "Visa";

    private void RemoveItem(MenuItem item)
    {
        OrderService.RemoveFromOrder(item);
        StateHasChanged();
    }

    private void ClearCart()
    {
        OrderService.ClearOrder();
        StateHasChanged();
    }

    private void Checkout()
    {
        string customerName = CustomerService.LoggedInCustomer?.Name ?? "Guest";
        string paymentMethod = CustomerService.LoggedInCustomer == null ? selectedPaymentMethod : "Visa";

        // Generate receipt and navigate
        var receipt = OrderService.GenerateReceipt(customerName, paymentMethod);
        OrderService.SetCurrentReceipt(receipt);
        NavigationManager.NavigateTo("/receipt");
    }
}
